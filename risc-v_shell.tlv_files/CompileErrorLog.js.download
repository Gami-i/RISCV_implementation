(function() {
  var $, CompileErrorLog, Logging, Pane, Utils, livestamp, ref;

  ref = [], Pane = ref[0], $ = ref[1], Logging = ref[2], Utils = ref[3], livestamp = ref[4];


  /*
  A module that displays compile errors.
  
  @extend Pane
  @extend ModuleConfigObject
   */

  CompileErrorLog = (function() {
    function CompileErrorLog() {}


    /*
    Provides model initialization (called by @initPane())
     */

    CompileErrorLog.prototype.modelInit = function() {
      this.flags();
      this.compileID(null);
      this.stdall("");
      this.makeout("");
      this.exitCode(null);
      return this.time(null);
    };

    CompileErrorLog.prototype.compileID = null;

    CompileErrorLog.prototype.init = function(name, ide, project, tabbedview) {
      this.compileID = null;
      return this.initPane("ErrorLog", name, ide, project, tabbedview, {
        statusFlags: {},
        compileID: null,
        stdall: "",
        makeout: "",
        exitCode: null,
        time: null
      });
    };


    /*
    Flags have been disabled (but may be added back at some point).
    Sets the different flags in the model, to be shown with check/x status.
    Values can be:
    - `null`: Hasn't been set yet.  (`fa-circle-o`)
    - `true`: Ran successfully.  (`fa-checkmark`)
    - `false`: Run failed.  (`fa-x`)
    - `"running"`: Currently running, no output.  (`fa-spinner fa-pulse`)
     */

    CompileErrorLog.prototype.flags = function(val) {
      if (val == null) {
        val = null;
      }

      /*
      return if @model.get "serialized"
      @model.set "statusFlags",
        compile: {name: "SandPiper Compilation", val}
        graph: {name: "Diagram", val}
        vcd: {name: "Simulation", val}
        navtlv: {name: "NavTLV", val}
      @model.invalidate "statusFlags"
       */
      return this;
    };


    /*
    Sets stdall in the LiveUI model to the given value and invalidates the model.
    @param {string} stdall The value to set as stdall
    @return CompileErrorLog
     */

    CompileErrorLog.prototype.stdall = function(stdall) {
      Utils.$one("#" + this.path + "-msg-stdall").html(stdall);
      return this;
    };


    /*
    Sets makeout in DOM.
    @param {String} makeout The value to set as makeout
    @return CompileErrorLog
     */

    CompileErrorLog.prototype.makeout = function(makeout) {
      Utils.$one("#" + this.path + "-msg-makeout").html(makeout);
      return this;
    };


    /*
    Sets time in the LiveUI model to the given value and invalidates the model.
    @param {Date} time The value to set as time
    @return CompileErrorLog
     */

    CompileErrorLog.prototype.time = function(time) {
      Utils.$one(".timestamp", this.paneEl).livestamp(time);
      return this;
    };


    /*
    Sets exitCode in the DOM.
    @param {String} exitCode The value to set as exitCode
    @return {CompileErrorLog} this
     */

    CompileErrorLog.prototype.exitCode = function(exitCode) {
      Utils.$one("#" + this.path + "-exit-code", this.paneEl).html(exitCode);
      return this;
    };


    /*
    Sets compileID and updates the DOM.
    @param {Integer} compileID The value to set as compileID
    @return {CompileErrorLog} this
     */

    CompileErrorLog.prototype.setCompileID = function(compileID) {
      this.compileID = compileID;
      Utils.$one("#" + this.path + "-compile-id", this.paneEl).text(this.compileID);
      return this;
    };


    /*
    Converts a log entry into HTML.
     */

    CompileErrorLog.prototype.logtoHTML = function(log) {
      var color;
      color = log.severity === "stderr" ? "red" : "black";
      return "<div style=\"color: " + color + "\" data-severity=\"" + log.severity + "\">" + log.message + "</div>";
    };


    /*
    Registers the compiler.
    Listens to varous events during the compilation run.
    @param {SandPiperCompiler} compiler The value to set as compiler
    @return CompileErrorLog
     */

    CompileErrorLog.prototype.compiler = function(compiler) {
      compiler.on("m4/done", (function(_this) {
        return function(data) {
          _this.flags("running");
          _this._stdall = [];
          _this._makeout = [];
          return _this.prepLogOutput(data.compile);
        };
      })(this));
      compiler.on("graphviz/done", (function(_this) {
        return function(data) {
          return _this.setFlag("graph", data.success === "success");
        };
      })(this));
      compiler.on("verilator/done", (function(_this) {
        return function(data) {
          return _this.setFlag("vcd", data.success === "success");
        };
      })(this));
      compiler.on("sandpiper/done", (function(_this) {
        return function(data) {
          _this.setFlag("navTLV", data.success === "success");
          if (data.exitCode) {
            return _this.exitCode(code);
          }
        };
      })(this));
      compiler.on("stdall", (function(_this) {
        return function(data) {
          if (_this._stdall == null) {
            _this._stdall = [];
          }
          _this._stdall[data.index] = {
            message: data.message,
            severity: data.severity
          };
          return _this.stdall(_this._stdall.filter(function(i) {
            return i;
          }).map(_this.logtoHTML).join(""));
        };
      })(this));
      compiler.on("makeout", (function(_this) {
        return function(data) {
          if (_this._makeout == null) {
            _this._makeout = [];
          }
          _this._makeout[data.index] = {
            message: data.message,
            severity: data.severity
          };
          return _this.makeout = _this._makeout.filter(function(i) {
            return i;
          }).map(_this.logtoHTML).join("");
        };
      })(this));
      compiler.on("stdall/all", (function(_this) {
        return function(data) {
          return _this.stdall(data);
        };
      })(this));
      compiler.on("makeout/all", (function(_this) {
        return function(data) {
          return _this.makeout(data);
        };
      })(this));
      return this;
    };


    /*
    Set a compilation step flag's status.
    This is disabled for now, but may be resurrected.
    @param {String} the name of a compilation step
    @param {Anything} the value to set
     */

    CompileErrorLog.prototype.setFlag = function(name, val) {};

    CompileErrorLog.prototype.oldSetFlag = function(name, val) {
      var flags;
      if (this.model.get("serialized")) {
        return;
      }
      flags = this.model.get("statusFlags");
      if (flags[name]) {
        flags[name].val = val;
      }
      this.model.set("flags", flags);
      return this.model.invalidate("statusFlags");
    };


    /*
    Prepares for new log output.
    If this traffic has a new compileID, clear state for a new compilation and prep the DOM.
    Update timestamp.
    @param {String} compileID The compileID of the traffic.
    @return {CompileErrorLog} this
     */

    CompileErrorLog.prototype.prepLogOutput = function(id) {
      if (this.compileID !== id) {
        this.stdall("");
        this.makeout("");
        this.exitCode(null);
        this.time(new Date());
        this.setFlag("compile", true);
        this.setCompileID(id);
      }
      return this;
    };

    return CompileErrorLog;

  })();

  define("ErrorLog", function(require, exports, module) {
    Pane = require("Pane");
    $ = require("jquery");
    Logging = require("Logging");
    Utils = require("Utils");
    require("livestamp");
    livestamp = $.fn.livestamp;
    CompileErrorLog.prototype = $.extend({}, Pane.prototype, module.config(), CompileErrorLog.prototype);
    return CompileErrorLog;
  });

}).call(this);
