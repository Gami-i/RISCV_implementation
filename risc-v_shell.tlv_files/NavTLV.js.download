(function() {
  var $, Logging, NavTLV, Pane, Utils, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = [], Pane = ref[0], $ = ref[1], Utils = ref[2], Logging = ref[3];


  /*
  A module that displays an HTML representation of the TLV code from simulation (colored for navigation)
  
  @extend Pane
  @extend ModuleConfigObject
   */

  NavTLV = (function() {
    function NavTLV() {
      this.navtlv = bind(this.navtlv, this);
    }

    NavTLV._lastUpdated = null;

    NavTLV.prototype.init = function(name, ide, project, tabbedview) {
      return this.initPane("NavTLV", name, ide, project, tabbedview, {
        "navtlv": ""
      }).then((function(_this) {
        return function() {
          _this.enableTimestamp();
          return _this;
        };
      })(this));
    };


    /*
    Populates the navtlv into the DOM.
    @param {String} navtlv The value to set as navtlv
    @return NavTLV
     */

    NavTLV.prototype.navtlv = function(navtlv) {
      var bindClick, el, i, j, len, lineEls, num, source_line_num;
      this.setStatus("success");
      Utils.$one("[data-navtlv-code]", this.paneEl).html(navtlv);
      Utils.$one("[data-navtlv-linenums]", this.paneEl).html("");
      Utils.$one("[data-navtlv-highlight]", this.paneEl).html("");
      lineEls = $("[source-line-num]", $("[data-navtlv-code] >pre", this.paneEl));
      i = 0;
      for (j = 0, len = lineEls.length; j < len; j++) {
        el = lineEls[j];
        i++;
        source_line_num = el.getAttribute("source-line-num");
        num = $("<pre class=\"no-select\">").text("" + i);
        num.mouseenter((function(_this) {
          return function(e) {
            i = $(e.target).parent().data("navtlv-linenum");
            return $("[data-navtlv-highlight-line='" + i + "']", _this.paneEl).css("background-color", "rgba(255, 252, 0, 0.2)");
          };
        })(this));
        num.mouseout((function(_this) {
          return function(e) {
            i = $(e.target).parent().data("navtlv-linenum");
            return $("[data-navtlv-highlight-line='" + i + "']", _this.paneEl).css("background-color", "transparent");
          };
        })(this));
        num.click((function(_this) {
          return function(e) {
            i = $(e.target).parent().data("navtlv-source-line-num");
            _this._editor.activate();
            return _this._editor.setCursor(i - 1, 0);
          };
        })(this));
        $("[data-navtlv-linenums]", this.paneEl).append($("<div data-navtlv-linenum='" + i + "' data-navtlv-source-line-num='" + source_line_num + "'></div>").append(num));
        $("[data-navtlv-highlight]", this.paneEl).append($("<div data-navtlv-highlight-line='" + i + "'><pre>&nbsp;</pre></div>"));
      }
      bindClick = (function(_this) {
        return function() {
          $("#" + _this.path + " [data-navtlv-code]").on("click", "[logical_entity]", function(e) {
            var le;
            le = $(e.target).attr("logical_entity");
            if (($(e.target).is(".tlv_ident_pipeline, .tlv_ident_beh_hier_1")) || ($(e.target).is(".tlv_ident_pipeline, .tlv_ident_beh_hier_2"))) {
              return _this.highlightBehHier(le, e.ctrlKey);
            } else {
              return _this.highlightLogicalElement(le, e.ctrlKey);
            }
          });
          return $("#" + _this.path + " [data-navtlv-code]").on("click", function(e) {
            if ($(e.target).attr("logical_entity")) {
              return;
            }
            return _this.unhighlightLogicalElements();
          });
        };
      })(this);

      /*
      The Blade template doesn't immediately render, so using a timeout to ensure that the
      file is in view.
      TODO: Undo this.
       */
      setTimeout(bindClick, 150);
      return this;
    };


    /*
    Unhighlights all highlighted signals in NavTLV
    @param {String} le the logical entity of the clicked on element
     */

    NavTLV.prototype._unhighlightLogicalElements = function(le) {
      return $("#" + this.path + " [data-navtlv-code] [logical_entity]").removeClass("highlight");
    };


    /*
    Highlights all signals with the given logical entity in NavTLV
    @param {String} le the logical entity to highlight
     */

    NavTLV.prototype._highlightLogicalElement = function(le) {
      return $("#" + this.path + " [data-navtlv-code] [logical_entity='" + le + "']").addClass("highlight");
    };


    /*
    Sets compiler  to the given value.
    @param {SandPiperCompiler} compiler The value to set as compiler
    @return NavTLV
     */

    NavTLV.prototype.compiler = function(compiler) {
      compiler.on("navTLV", this.navtlv);
      compiler.on("navtlv/done", (function(_this) {
        return function(data) {
          if (data.success === "success") {
            return _this.setStatus("success");
          }
          return _this.setStatus(data.timeout ? "timeout" : "fail");
        };
      })(this));
      compiler.on("sandpiper/done", (function(_this) {
        return function(data) {
          if (data.success !== "failure") {
            return;
          }
          return _this.setStatus(data.timeout ? "timeout" : "fail");
        };
      })(this));
      compiler.on("newcompile", (function(_this) {
        return function() {
          return _this.setStatus("working");
        };
      })(this));
      return this;
    };


    /*
    Sets editor in the LiveUI model to the given value and invalidates the model.
    @param {Editor} _editor The value to set as editor
    @return NavTLV
     */

    NavTLV.prototype.editor = function(_editor) {
      this._editor = _editor;
      return this;
    };

    return NavTLV;

  })();

  define("NavTLV", function(require, exports, module) {
    var ModelViewSync;
    Pane = require("Pane");
    ModelViewSync = require("ModelViewSync");
    $ = require("jquery");
    Utils = require("Utils");
    Logging = require("Logging");
    NavTLV.prototype = $.extend({}, Pane.prototype, ModelViewSync, module.config(), NavTLV.prototype);
    return NavTLV;
  });

}).call(this);
