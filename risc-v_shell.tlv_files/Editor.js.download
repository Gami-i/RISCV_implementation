(function() {
  var $, CodeMirror, Editor, EventEmitter, Logging, Pane, PanelLabel, Utils, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = [], $ = ref[0], Logging = ref[1], Utils = ref[2], Pane = ref[3], PanelLabel = ref[4], CodeMirror = ref[5], EventEmitter = ref[6];


  /*
  A module that includes a CodeMirror editing pane.
  Note that this class handles autocompile, but {ProjectManager} handles autosave.
  
  @extend Pane
  @extend ModuleConfigObject
   */

  Editor = (function() {
    function Editor() {
      this.compile = bind(this.compile, this);
    }

    Editor.AUTOCOMPILE = false;

    Editor.prototype.compileChangeGeneration = -1;

    Editor.prototype.compiler = null;

    Editor.prototype.init = function(name, ide, project, tabbedview) {
      return this.initPane("Editor", name, ide, project, tabbedview);
    };

    Editor.prototype.initOpened = function() {
      var actions;
      this.codemirror();
      actions = [
        {
          name: "Compile/Sim (<Ctrl>-Enter)",
          href: "#" + (this.childPath("label-compile"))
        }, {
          name: "Show Verilog",
          href: "#" + (this.childPath("label-stats"))
        }, {
          name: "Open Results",
          href: "#" + (this.childPath("label-results"))
        }
      ];
      return this.addLabel({
        initial: "E",
        actions: actions
      }).then((function(_this) {
        return function(label) {
          var el;
          Utils.assert(_this.label === label);
          el = label.el;
          el.off("click");
          el.on("click", "[href='#" + (_this.childPath("label-compile")) + "']", function(e) {
            console.log("Compiling from " + (_this.childPath("label")));
            e.preventDefault();
            return _this.compile();
          });
          el.on("click", "[href='#" + (_this.childPath("label-stats")) + "']", function(e) {
            e.preventDefault();
            if (!_this.compiler) {
              return;
            }
            return _this.compiler.showStats();
          });
          el.on("click", "[href='#" + (_this.childPath("label-results")) + "']", function(e) {
            e.preventDefault();
            if (!_this.compiler) {
              return;
            }
            return _this.compiler.showResults();
          });
          return _this;
        };
      })(this));
    };


    /*
    Override for open.
    TODO: Proper overriding doesn't work because we dont use coffeescript 'extends'.
          No way to prevent calls to open(..).
    @param tabbedview
    @tlv TLV code to load into the Editor if truthy.
     */

    Editor.prototype.openTLV = function(tabbedview, tlv) {
      return this.open(tabbedview).then((function(_this) {
        return function() {
          if (tlv) {
            return _this.setTLV(tlv, true, true);
          }
        };
      })(this));
    };


    /*
    Load TLV code.
    @param {String} tlv The TLV code to load into the editor.
    @param {boolean} clear Whether to clear the history of the old contents.
    @param {boolean} comp Whether to compile the code.
     */

    Editor.prototype.setTLV = function(tlv, clear, comp) {
      this.setValue(tlv);
      if (clear) {
        this.editor.getDoc().clearHistory();
      }
      if (comp) {
        return this.compile(true);
      }
    };


    /*
    Sets compiler.
    @param {ServerCompile} compiler The value to set as compiler
    @return Editor
     */

    Editor.prototype.setCompiler = function(compiler) {
      this.compiler = compiler;
      return this;
    };


    /*
    Triggers a compilation.
    @param {Boolean} immediate `no` to wait a fixed amount of time before compiling,
                     ignoring other compiles until then.
     */

    Editor.prototype.compile = function(immediate) {
      var doCompile;
      if (immediate == null) {
        immediate = false;
      }
      doCompile = (function(_this) {
        return function() {
          if (!_this.compiler) {
            return;
          }
          _this.setStatus("none");
          _this.compileChangeGeneration = _this.editor.changeGeneration();
          _this.compiler.compile(_this.editor.getValue(), function(id) {
            return console.log("Started compilation " + id);
          });
          return _this._compileWait = null;
        };
      })(this);
      if (this._compileWait) {
        return;
      }
      return this._compileWait = setTimeout(doCompile, (immediate ? 0 : 750));
    };


    /*
    Initializes a CodeMirror instance inside the Editor.
     */

    Editor.prototype.codemirror = function() {
      this.editor = CodeMirror($("[data-Editor]", this.paneEl).get(0), {
        value: " ",
        mode: "text/x-tlv",
        theme: "tlv-basic",
        lineNumbers: true,
        matchBrackets: false,
        smartIndent: true,
        indentUnit: 3,
        tabSize: 3,
        electricChars: false,
        styleActiveLine: true,
        foldGutter: {
          rangeFinder: new CodeMirror.fold.combine(CodeMirror.fold.indent, CodeMirror.fold.comment)
        },
        gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
        extraKeys: this.keybindings()
      });
      this.editor.setValue("");
      return this.editor.on('changes', (function(_this) {
        return function() {
          _this.hideLabel();
          if (_this.editor.isClean(_this.compileChangeGeneration)) {
            return _this.setStatus("none");
          } else {
            _this.setStatus("outdated");
            if (_this.constructor.AUTOCOMPILE) {
              return _this.compile();
            }
          }
        };
      })(this));
    };


    /*
    Returns additional keybindings for CodeMirror.
    @return {Object} An object in [Key Map](https://codemirror.net/doc/manual.html#keymaps) format.
      `null` if no additional keybindings are desired.
     */

    Editor.prototype.keybindings = function() {
      return {
        "Ctrl-Enter": (function(_this) {
          return function() {
            return _this.compile(true);
          };
        })(this),
        "Alt-Enter": (function(_this) {
          return function() {
            return _this.compile(true);
          };
        })(this)
      };
    };


    /*
    Sets the text showing in the text editor.
    @param {String} str the text to insert into the editor
     */

    Editor.prototype.setValue = function(str) {
      this.editor.setValue(str);
      return setTimeout(((function(_this) {
        return function() {
          return _this.editor.refresh();
        };
      })(this)), 10);
    };


    /*
    Activate this tab.
     */

    Editor.prototype.activate = function() {
      return this.tabbedview.activatePane(this);
    };


    /*
    Set the cursor inside the editor.
    @param {int|Object} line either the line number or `{line, ch}`
    @param {int} char the character position
     */

    Editor.prototype.setCursor = function(line, char) {
      return this.editor.setCursor(line, char);
    };


    /*
    Return the number of lines in the document.
    @return {int} the number of lines in the editor.
     */

    Editor.prototype.lineCount = function() {
      return this.editor.lineCount();
    };

    return Editor;

  })();

  require.config({
    packages: [
      {
        name: "codemirror",
        location: "/module/Editor/codemirror",
        main: "lib/codemirror"
      }
    ]
  });

  define("Editor", function(require, exports, module) {
    Pane = require("Pane");
    $ = require("jquery");
    Logging = require("Logging");
    Utils = require("Utils");
    PanelLabel = require("PanelLabel");
    CodeMirror = require("codemirror");
    require("codemirror/mode/verilog/verilog");
    require("codemirror/addon/selection/active-line");
    require("codemirror/addon/fold/foldcode");
    require("codemirror/addon/fold/foldgutter");
    require("codemirror/addon/fold/comment-fold");
    require("codemirror/addon/fold/indent-fold");
    require("codemirror/addon/search/search");
    require("codemirror/addon/search/searchcursor");
    require("codemirror/addon/search/jump-to-line");
    Editor.prototype = $.extend({}, Pane.prototype, module.config(), Editor.prototype);
    return Editor;
  });

}).call(this);
