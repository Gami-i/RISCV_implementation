(function() {
  var $, BladeComponent, Editor, ErrorDisplay, ErrorLog, FlexSplit, Graph, IDE, IDEMenu, Logging, NavTLV, Project, Promise, ServerCompile, StaticPanes, TabbedView, UserAuth, Utils, VizPane, WaveformViewer, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = [], BladeComponent = ref[0], $ = ref[1], Logging = ref[2], Utils = ref[3], Promise = ref[4], ErrorDisplay = ref[5], ErrorLog = ref[6], UserAuth = ref[7], Project = ref[8], ServerCompile = ref[9], IDEMenu = ref[10], FlexSplit = ref[11], TabbedView = ref[12], Editor = ref[13], Graph = ref[14], VizPane = ref[15], WaveformViewer = ref[16], StaticPanes = ref[17], NavTLV = ref[18];


  /*
  Displays a full-screen page with the majority of the IDE components enabled.
  
  @extend FlexSplit.Parent
  @extend BladeComponent
  @extend ModuleConfigObject
   */

  IDE = (function() {

    /*
    @property {Promise} Resolves when the IDE is fully loaded.
     */
    IDE.prototype._loaded = null;

    IDE.prototype.split = null;

    IDE.prototype.staticPanes = null;

    IDE.prototype.project = null;

    IDE.prototype.editor = null;

    IDE.prototype.errorlog = null;

    IDE.prototype.navtlv = null;

    IDE.prototype.graph = null;

    IDE.prototype.viz = null;

    IDE.prototype.viewer = null;

    function IDE() {
      this.openStaticPane = bind(this.openStaticPane, this);
      var agent;
      this.staticPanes = new StaticPanes();
      FlexSplit.TabbedView = TabbedView;
      agent = navigator.userAgent;
      if (agent.search("Chrome") < 0 && agent.search("Safari") < 0 && agent.search("Edge") < 0 && agent.search("Firefox") < 0) {
        window.alert("Makerchip is not tested for your browser." + " We recommend Chrome, Safari, Firefox, or Edge (Chrome is best).");
      }
      this.path = "ide";
      this._loaded = this.compileComponent("IDE", {
        path: this.path
      }, this.blade).then((function(_this) {
        return function(html) {
          Utils.$one("#" + _this.path).html(html);
          return Promise.join(new ServerCompile().init(), new ErrorDisplay().init(_this.childPath("err")), new Project().init());
        };
      })(this)).then((function(_this) {
        return function(arg) {
          var compiler, errModal, menuOpts, project;
          compiler = arg[0], errModal = arg[1], project = arg[2];
          menuOpts = {
            title: $("title").attr("data-title"),
            subtitle: $("title").attr("data-subtitle")
          };
          return Promise.join(Promise.resolve(project), Promise.resolve(compiler), Promise.resolve(errModal), new IDEMenu().init(_this.childPath("menu"), menuOpts), new UserAuth().init(errModal), null);
        };
      })(this)).then((function(_this) {
        return function(all) {
          var bugReport, compiler, errModal, menu, project, user;
          project = all[0], compiler = all[1], errModal = all[2], menu = all[3], user = all[4], bugReport = all[5];
          compiler.setProject(project);
          menu.project(project);
          _this.initFlexSplit("horizontal");
          return Promise.join(_this.createLeft(project, compiler, _this.split), _this.createRight(project, compiler, _this.split), function(left, right) {
            return project;
          });
        };
      })(this)).then((function(_this) {
        return function(project) {
          var modelViews;
          modelViews = [];
          if (_this.graph != null) {
            _this.graph.modelViews(modelViews);
          }
          if (_this.viewer != null) {
            _this.viewer.modelViews(modelViews);
          }
          if (_this.navtlv != null) {
            _this.navtlv.modelViews(modelViews);
          }
          _this.project = project;
          _this.project.initIDE(_this);
          Utils.$one("#loading").fadeOut();
          if (window.mcLoadingInterval != null) {
            return clearInterval(window.mcLoadingInterval);
          } else {
            return console.warn("mcLoadingInterval not defined.");
          }
        };
      })(this)).error(function(err) {
        return console.log(err);
      });
    }

    IDE.prototype.initFlexSplit = function(direction) {
      return this.split = new FlexSplit().init(this.childPath("split"), direction, this, "child");
    };

    IDE.prototype.createLeft = function(project, compiler, split) {
      var tabbed;
      tabbed = null;
      return split.addTabbedChild("left").then((function(_this) {
        return function(tabbed) {
          return [tabbed, _this["public"]];
        };
      })(this)).then(function(arg) {
        var codeURL, codeURLArg, exampleCode, publicDir, ref1, tabbed, tlvPromise;
        tabbed = arg[0], publicDir = arg[1];
        tabbed.intoSplit("left", split);
        tlvPromise = Promise.resolve(null);
        if (!project.user && !project.path) {
          codeURL = publicDir + "default.tlv";
          if ((typeof window !== "undefined" && window !== null ? (ref1 = window.location) != null ? ref1.href : void 0 : void 0) && navigator.userAgent.search("PhantomJS") < 0) {
            codeURLArg = new URL(window.location.href).searchParams.get("code_url");
            if (codeURLArg != null) {
              codeURL = codeURLArg;
            } else {
              exampleCode = new URL(window.location.href).searchParams.get("example_code");
              if (exampleCode != null) {
                codeURL = "" + publicDir + exampleCode;
              }
            }
          }
          tlvPromise = $.get("" + codeURL)["catch"](function() {
            console.log("Failed to find " + codeURL + ". Using default code.");
            codeURL = publicDir + "default.tlv";
            return $.get("" + codeURL);
          });
        }
        return Promise.join(new Editor().init("Editor", this, project), new ErrorLog().init("Log", this, project), new NavTLV().init("Nav-TLV", this, project), tlvPromise, Promise.resolve(tabbed));
      }).then((function(_this) {
        return function(arg) {
          var editor, errorlog, navtlv, tabbed, tlv;
          editor = arg[0], errorlog = arg[1], navtlv = arg[2], tlv = arg[3], tabbed = arg[4];
          _this.editor = editor;
          _this.errorlog = errorlog;
          _this.navtlv = navtlv;
          editor.setCompiler(compiler);
          errorlog.compiler(compiler);
          navtlv.compiler(compiler);
          navtlv.editor(editor);
          return Promise.resolve(tabbed).then(function() {
            return editor.openTLV(tabbed, tlv);
          }).then(function() {
            return navtlv.open(tabbed);
          }).then(function() {
            errorlog.open(tabbed);
            return [editor, navtlv, errorlog, tabbed];
          });
        };
      })(this)).then(function(arg) {
        var editor, errorlog, navtlv, tabbed;
        editor = arg[0], navtlv = arg[1], errorlog = arg[2], tabbed = arg[3];
        project.editor(editor);
        return tabbed.activatePane(editor);
      });
    };

    IDE.prototype.createRight = function(project, compiler, split) {
      var tabbed;
      tabbed = null;
      return split.addTabbedChild("right").then(function(tabbed) {
        tabbed.intoSplit("right", split);
        return Promise.join(new Graph().init("Diagram", this, project), new VizPane().init("Viz", this, project), new WaveformViewer().init("Waveform", this, project), Promise.resolve(tabbed));
      }).then((function(_this) {
        return function(arg) {
          var graph, tabbed, viewer, viz;
          graph = arg[0], viz = arg[1], viewer = arg[2], tabbed = arg[3];
          _this.graph = graph;
          _this.viz = viz;
          _this.viewer = viewer;
          graph.compiler(compiler);
          if (viz !== null) {
            viz.compiler(compiler);
          }
          viewer.compiler(compiler);
          return Promise.all([graph.open(tabbed), viz !== null ? viz.open(tabbed) : null, viewer.open(tabbed)]);
        };
      })(this))["catch"](function(err) {
        return console.log("Failed to initialize right pane: " + err);
      }).then(function(arg) {
        var graph, viewer, viz;
        graph = arg[0], viz = arg[1], viewer = arg[2];
        return graph.activate();
      });
    };


    /*
    Get a {TabbedView} (the upper-left-most one)
     */

    IDE.prototype.getATabbedView = function() {
      var split;
      split = this.split;
      while (split instanceof FlexSplit) {
        split = split.children.left ? split.children.left : split.children.top ? split.children.top : split.children.center;
      }
      Utils.assert(split instanceof TabbedView, "FlexSplit leaf not TabbedView");
      return split;
    };


    /*
    Load a TLV file from a URL.
    @param {String} url The URL of the file to load.
     */

    IDE.prototype.loadTLVURL = function(url) {
      var tlvPromise;
      if (typeof window.ga === "function") {
        window.ga("send", {
          hitType: "event",
          eventCategory: "TLV File",
          eventAction: "load",
          eventLabel: url
        });
      }
      return tlvPromise = $.get(url).then((function(_this) {
        return function(tlv) {
          return _this.editor.setTLV(tlv, false, true);
        };
      })(this));
    };


    /*
    Load a TLV file from a static page given a URL.  If Google Analytics is loaded, also inform Analytics.
    @param {String} mnemonic the static page identifier
    @param {Integer} position **Optional** for tutorials, the position of the tutorial on the page (1st, 2nd, etc.)
      For other pages (help, etc.) assign unique URLs to each TLV loaded.
    @param {String} url The URL of the file to load.
    See {IDE#loadTLVURL} for actual implementation.
     */

    IDE.prototype.loadStaticPageTLV = function(mnemonic, position, url) {
      var ref1;
      if (!url && position) {
        ref1 = [position, null], url = ref1[0], position = ref1[1];
      }
      if (typeof window.ga === "function") {
        window.ga("send", {
          hitType: "event",
          eventCategory: "Static Page",
          eventAction: "load code",
          eventLabel: mnemonic,
          eventValue: position
        });
      }
      return this.loadTLVURL(url);
    };


    /*
    An onclick for TOC links in Tutorial/Example/Etc {Pane}s to scroll to an anchor.
    Requires a position reference anchor named "top" at the top of the mc-auto-pane-contents
    and an anchor to scroll to.
    (I'm sure there's a better way.)
    @param {HTMLElement} linkEl the element clicked
    @param {String} toEl the ID of the element to which to scroll (without "#")
     */

    IDE.prototype.anchorLink = function(linkEl, toEl) {
      var contents;
      contents = $(linkEl).parents(".mc-auto-pane-contents");
      return contents.animate({
        scrollTop: $("a[name='" + toEl + "']").offset().top - $("a[name='top']", contents).offset().top
      }, 400);
    };


    /*
    Return a URL to share on URL on linkedin.
    @param {String} url the URL to share
    @param {String} title the title of the post
    @param {String} summary a summary to include in the post
    @param {String} source a description of the URL being shared
     */

    IDE.prototype.linkedinShareURL = function(url, title, summary, source) {
      return "https://www.linkedin.com/shareArticle?mini=true" + "&url=" + encodeURIComponent(url) + "&title=" + encodeURIComponent(title) + "&summary=" + encodeURIComponent(summary) + "&source=" + encodeURIComponent(source);
    };


    /*
    onClick for Linkedin certificate.
     */

    IDE.prototype.linkedinCertificateURL = function() {
      return window.open(this.linkedinShareURL("https://makerchip.com", "TL-Verilog Certificate", "I got my TL-Verilog certification at makerchip.com! #makerchip #tlverilog", "makerchip.com"));
    };


    /*
    Open a {Pane} of @staticPanes if a pane by the given name does not already exist in the IDE.
    @param {String} mnemonic The name of the pane.
    @return {Promise<Pane>}
     */

    IDE.prototype.openStaticPane = function(mnemonic) {
      var existingPane;
      existingPane = TabbedView.allPanes[mnemonic];
      return Promise.resolve(existingPane !== void 0 ? existingPane : this.staticPanes.init(mnemonic)).then((function(_this) {
        return function(pane) {
          return _this._loaded.then(function() {
            var tabbed;
            if (!pane.opened) {
              tabbed = _this.getATabbedView();
              return pane.open(tabbed).then(function() {
                return tabbed.activatePane(pane);
              });
            }
          });
        };
      })(this));
    };

    return IDE;

  })();

  define("IDE-loaded", function(require) {
    BladeComponent = require("BladeComponent");
    $ = require("jquery");
    Logging = require("Logging");
    Utils = require("Utils");
    Promise = require("bluebird");
    ErrorDisplay = require("ErrorDisplay");
    ErrorLog = require("ErrorLog");
    UserAuth = require("UserAuth");
    Project = require("Project");
    ServerCompile = require("ServerCompile");
    IDEMenu = require("IDEMenu");
    FlexSplit = require("FlexSplit");
    TabbedView = require("TabbedView");
    Editor = require("Editor");
    Graph = require("Graph");
    VizPane = require("VizPane");
    WaveformViewer = require("WaveformViewer");
    StaticPanes = require("StaticPanes");
    NavTLV = require("NavTLV");
    return IDE;
  });


  /*
  Prevent RequireJS from timing out and breaking the site.
  (Should now be provided at window level on requirejs load.)
   */

  define(["/modules/ModuleConfig.js", "module"], function(ModuleConfig, module) {
    return new ModuleConfig(function() {
      return require(["IDE-loaded"], function(IDE) {
        $.extend(IDE.prototype, FlexSplit.Parent, BladeComponent, module.config());
        return window.ide = new IDE();
      });
    });
  });

}).call(this);
