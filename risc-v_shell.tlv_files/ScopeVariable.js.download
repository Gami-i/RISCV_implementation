(function() {
  var $, ScopeVariable;

  $ = [][0];


  /*
  object for keeping track of current scope
   */

  ScopeVariable = (function() {
    ScopeVariable.prototype.name = "";

    ScopeVariable.prototype.parent = null;

    ScopeVariable.prototype.depth = -1;

    ScopeVariable.prototype.instance = "";

    ScopeVariable.prototype.conditions = null;


    /*
    @param {String} name the current scope name of this scope
    @param {ScopeVariable} parent the parent scopeVariable of this scope
     */

    function ScopeVariable(name, parent, depth, instance) {
      var mindex, numre, re;
      this.parent = parent;
      this.depth = depth;
      this.instance = instance != null ? instance : "";
      re = new RegExp(/.*\([0-9]+\)/);
      numre = new RegExp(/[0-9]+/);
      if (re.test(name)) {
        name = name.replace("(", "[").replace(")", "]");
      }
      if (this.instance.length > 0) {
        name += "[" + this.instance.match(numre)[0] + "]";
      }
      this.conditions = [];
      if (name.indexOf("?") === -1) {
        this.name = this.expandName(name);
      } else {
        console.log("Debug: Oh, we actually got here: ScopeVariable.constructor() with '?'");
        name = name.substring(1);
        while (name.indexOf("?") > -1) {
          this.conditions.push(this.parent != null ? this.expandName(name) : name + name.substring(0, name.indexOf("?")));
          name = name.substring(name.indexOf("?") + 1);
        }
        mindex = [name.indexOf("/"), name.indexOf(">"), name.indexOf("|")].filter(function(x) {
          return x >= 0;
        }).sort(function(a, b) {
          return a > b;
        }).shift();
        this.conditions.push(this.parent != null ? this.expandName(name) : name + name.substring(0, mindex));
        name = name.substring(mindex);
        this.name = this.expandName(name);
      }
    }


    /*
    Expand the name out to include the parent
     */

    ScopeVariable.prototype.expandName = function(name) {
      var ref;
      return (this.parent != null ? this.parent.name + (((this.parent.name.length === 0) || ((ref = name.charAt(0)) === "/" || ref === ">" || ref === "|")) ? "" : ".") : "") + name;
    };

    return ScopeVariable;

  })();

  define(function(require, exports, module) {
    $ = require("jquery");
    $.extend(ScopeVariable.prototype, module.config());
    return ScopeVariable;
  });

}).call(this);
