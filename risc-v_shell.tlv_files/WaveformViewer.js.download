(function() {
  var $, Logging, Pane, Promise, Utils, WaveData, WaveformGenerator, WaveformViewer, ref;

  ref = [], $ = ref[0], Logging = ref[1], Utils = ref[2], Pane = ref[3], Promise = ref[4], WaveformGenerator = ref[5], WaveData = ref[6];


  /*
  class for managing and viewing the waveform representation of the given vcd file
  
  @extend Pane
  @extend ModelViewSync
   */

  WaveformViewer = (function() {
    var MAX_STARTING_SIGNALS, MAX_STARTING_TIME;

    function WaveformViewer() {}

    WaveformViewer.prototype["public"] = null;

    WaveformViewer.prototype.wg = null;

    WaveformViewer.prototype.rendered = false;

    WaveformViewer.prototype._compiler = null;

    WaveformViewer.prototype._tabbedview = null;

    WaveformViewer.prototype.le = null;

    WaveformViewer.prototype.hidden = null;

    MAX_STARTING_SIGNALS = 50;

    MAX_STARTING_TIME = 100;


    /*
    constructs a new WaveformViewer
    @param {String} path becomes path property
    @param {TabbedView} the corresponding TabbedView
    @return {Promise} A promise resolving to this.
     */

    WaveformViewer.prototype.init = function(name, ide, project, tabbedview) {
      return this.initPane("WaveformViewer", name, ide, project, tabbedview).then((function(_this) {
        return function() {
          var btn, btns, camelCase, element, fn, i, len;
          _this.enableTimestamp();
          _this.le = [];
          element = _this.getContainer();
          _this.project.on("vcd", function(wd) {
            _this.setStatus("success");
            return _this.updateWaveData(wd);
          });
          _this.project.on("verilator/done", function(data) {
            if (data.success === "success") {
              return _this.setStatus("success");
            }
          });
          element.on("click", ".wave, .wavescope", function(e) {
            var parentOffset, relX;
            parentOffset = _this.getContainer().offset();
            relX = e.pageX - parentOffset.left;
            return _this.wg.setLineByPosition(relX);
          });
          element.on("click", ".name, .value, .waveName, .scope", function(e) {
            var le;
            if ($(e.target).is(".waveExpand, .waveCollapse")) {
              return;
            }
            _this.le.push(le = $(e.target).parent().attr("logical_entity").replace(/\[[0-9]+\]/g, ""));
            if ($(e.target).parent().find(".scope").length) {
              return _this.highlightBehHier(le, e.ctrlKey);
            } else {
              return _this.highlightLogicalElement(le, e.ctrlKey);
            }
          });
          element.on("click", ".ruler", function(e) {
            var parentOffset, relX;
            parentOffset = _this.getContainer().offset();
            relX = e.pageX - parentOffset.left;
            if (relX > _this.wg.textRegionWidth) {
              return _this.wg.setLineByPosition(relX);
            }
          });
          btns = ["zoom-in", "zoom-out", "zoom-full", "move-left", "move-right"];
          camelCase = function(str) {
            return str.replace(/-([a-zA-Z])/g, function(g) {
              return g[1].toUpperCase();
            });
          };
          fn = function(btn) {
            var header;
            header = Utils.$one("#mc-waveform-header", _this.paneEl);
            return header.on("click", "[data-waveformviewer-button-" + btn + "]", function(e) {
              if (_this.wg) {
                return _this.toHTML(_this.wg[camelCase(btn)]());
              }
            });
          };
          for (i = 0, len = btns.length; i < len; i++) {
            btn = btns[i];
            fn(btn);
          }
          element.on("click", ".waveCollapse", function(e) {
            _this.wg.collapseScope($(e.target).parent().attr("logical_instance"));
            return _this.toHTML(_this.wg.generateWave(_this.wg.currentStart, _this.wg.currentEnd));
          });
          element.on("click", ".waveExpand", function(e) {
            _this.wg.expandScope($(e.target).parent().attr("logical_instance"));
            return _this.toHTML(_this.wg.generateWave(_this.wg.currentStart, _this.wg.currentEnd));
          });
          return _this;
        };
      })(this));
    };


    /*
    @return the waveform container element.
     */

    WaveformViewer.prototype.getContainer = function() {
      return Utils.$one("[data-WaveformViewer-container]", this.paneEl);
    };


    /*
    @return the path of this waveform viewer.
     */

    WaveformViewer.prototype.getPath = function() {
      return this.path;
    };


    /*
    Resize callback.
    @param {Boolean} force if `false` only redraw if size changed
     */

    WaveformViewer.prototype.resize = function(force) {
      var width;
      if (force == null) {
        force = false;
      }
      width = this.getContainer().width();
      if (this.wg && (force || (width !== this.wg.windowWidth))) {
        return this.toHTML(this.wg.generateWave(this.wg.currentStart, this.wg.currentEnd, width));
      }
    };


    /*
    function called on compiler run
    @param {compiler} _compiler the compiler in use
     */

    WaveformViewer.prototype.compiler = function(_compiler) {
      this._compiler = _compiler;
      this._compiler.on("vcd", (function(_this) {
        return function(wd) {
          return _this.updateWaveData(wd);
        };
      })(this));
      this._compiler.on("sandpiper/done", (function(_this) {
        return function(data) {
          if (data.success === "success") {
            return;
          }
          return _this.setStatus(data.timeout ? "timeout" : "fail");
        };
      })(this));
      this._compiler.on("verilator/done", (function(_this) {
        return function(data) {
          if (data.success === "success") {
            return _this.setStatus("success");
          }
          return _this.setStatus(data.timeout ? "timeout" : "fail");
        };
      })(this));
      return this._compiler.on("newcompile", (function(_this) {
        return function() {
          return _this.setStatus("working");
        };
      })(this));
    };


    /*
    Sets the HTML of this viewer.
    @param {String} out the string representation of the HTML to display
     */

    WaveformViewer.prototype.toHTML = function(out) {
      var date;
      this.getContainer().html(out);
      this.rendered = true;
      if ((this.wg.lineCycle != null) && !isNaN(this.wg.lineCycle)) {
        this.wg.setLineByCycle(this.wg.lineCycle);
      }
      if ((this.project.vizPane != null) && this.project.vizPane.cyc !== null) {
        this.wg.setVizCursorCycle(this.project.vizPane.cyc);
      }
      if ((this.le != null) && this.le.length > 0) {
        this._highlightLogicalElement(this.le);
      }
      return date = new Date();
    };


    /*
    Updates the viewer based on the wave data passed to it
    @param {WaveData} wd the waveform data
     */

    WaveformViewer.prototype.updateWaveData = function(wd) {
      this.wg = new WaveformGenerator(this, wd, this.getPath());
      if (wd.numTlvSignals > MAX_STARTING_SIGNALS) {
        this.wg.collapseAllScopes();
      } else {
        this.wg.collapseScope("SV");
      }
      if (wd.lastCycle > MAX_STARTING_TIME) {
        this.wg.currentEnd = MAX_STARTING_TIME;
      }
      this.wg.lineCycle = 0;
      if (this.active) {
        return this.resize();
      }
    };


    /*
    Highlight waveform elements based on the given logical entity
    @param {String} le the given logical entity
     */

    WaveformViewer.prototype._highlightLogicalElement = function(le) {
      var ele, i, len, results;
      if (!(le instanceof Array)) {
        this.le.push(le);
        le = this.le;
      }
      results = [];
      for (i = 0, len = le.length; i < len; i++) {
        ele = le[i];
        results.push($(("#" + (this.getPath()) + " [logical_entity='") + ele + "']").find(".name, .waveName, .wave rect, .value").addClass("highlight"));
      }
      return results;
    };


    /*
    Highlights waveform elements belonging to the given behavioral hierarchy logical entity
    @param {String} le the logical entity representing the pipeline
     */

    WaveformViewer.prototype._highlightBehHier = function(le) {
      return $(("#" + (this.getPath()) + " [logical_entity*='") + le + "']").find(".name, .waveName, .wave rect, .value").addClass("highlight");
    };


    /*
    Unhighlights all waveform elements
     */

    WaveformViewer.prototype._unhighlightLogicalElements = function() {
      $("#" + (this.getPath()) + " .highlight").removeClass("highlight");
      return this.le = [];
    };

    return WaveformViewer;

  })();

  define("WaveformViewer", function(require, exports, module) {
    var ModelViewSync;
    $ = require("jquery");
    Logging = require("Logging");
    Utils = require("Utils");
    ModelViewSync = require("ModelViewSync");
    Pane = require("Pane");
    Promise = require("bluebird");
    WaveformGenerator = require("WaveformViewer/WaveformGenerator");
    WaveData = require("VCD");
    WaveformViewer.prototype = $.extend({}, Pane.prototype, ModelViewSync, module.config(), WaveformViewer.prototype);
    return WaveformViewer;
  });

}).call(this);
